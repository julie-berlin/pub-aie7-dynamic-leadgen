# Production Docker Compose configuration
# For full-stack deployment with backend API and frontend

version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: dynamic-survey-api:production
    container_name: survey-backend-prod
    restart: unless-stopped
    
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log
      # Database config
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_PUBLISHABLE_KEY=${SUPABASE_PUBLISHABLE_KEY}
      - SUPABASE_SECRET_KEY=${SUPABASE_SECRET_KEY}
      # LLM config
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Security config
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      # Optional services
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    volumes:
      # Persistent logs
      - ./backend/logs:/app/logs
      # Configuration override (optional)  
      - ./backend/config/production:/app/config:ro
      # Cache directory
      - backend_cache:/app/data/cache
    
    networks:
      - survey_network
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend (React app)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-production}
    image: dynamic-survey-frontend:production
    container_name: survey-frontend-prod
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://backend:8000}
    
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    
    volumes:
      - frontend_cache:/app/node_modules/.cache
    
    networks:
      - survey_network
    
    depends_on:
      - backend
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional but recommended)
  nginx:
    image: nginx:alpine
    container_name: survey-nginx-prod
    restart: unless-stopped
    
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    networks:
      - survey_network
    
    depends_on:
      - backend
      - frontend
    
    # Health check for nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: survey-redis-prod
    restart: unless-stopped
    
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme} --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    networks:
      - survey_network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation (optional)
  logrotate:
    image: linkyard/docker-logrotate
    container_name: survey-logrotate-prod
    restart: unless-stopped
    
    volumes:
      - ./logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    environment:
      - LOGROTATE_INTERVAL=daily
      - LOGROTATE_COPIES=7
    
    networks:
      - survey_network

# Named volumes for persistence
volumes:
  backend_cache:
    driver: local
  frontend_cache:
    driver: local
  redis_data:
    driver: local

# Network configuration
networks:
  survey_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16